import { LibraryClass } from "@DataObjects/LibraryClass";
import { RackClass } from "@DataObjects/RackClass";
import { ScoreClass } from "@DataObjects/ScoreClass";
import { SheetClass } from "@DataObjects/SheetClass";
import { TLibraryObject } from "@DataObjects/TLibraryObject";
import { TRackObject } from "@DataObjects/TRackObject";
import { TScoreObject } from "@DataObjects/TScoreObject";
import { TSheetObject } from "@DataObjects/TSheetObject";
import { LibraryNode } from "@Frontend/AS/LibraryNode";
import { RackNode } from "@Frontend/AS/RackNode";
import { ScoreNode } from "@Frontend/AS/ScoreNode";
import { SheetNode } from "@Frontend/AS/SheetNode";
import { ASNode } from "../AS";

export class LibraryObjectMap extends Map<number, TLibraryObject> {};
export class RackObjectMap extends Map<number, TRackObject> {};
export class ScoreObjectMap extends Map<number, TScoreObject> {};
export class SheetObjectMap extends Map<number, TSheetObject> {};
export class LibraryClassMap extends Map<number, LibraryClass> {};
export class RackClassMap extends Map<number, RackClass> {};
export class ScoreClassMap extends Map<number, ScoreClass> {};
export class SheetClassMap extends Map<number, SheetClass> {};
export class LibraryNodesMap extends Map<number, LibraryNode> {};
export class RackNodesMap extends Map<number, RackNode> {};
export class ScoreNodesMap extends Map<number, ScoreNode> {};
export class SheetNodesMap extends Map<number, SheetNode> {};
declare class TLibrary{};

export interface ILibrary {
    LibraryName: string;
    LibraryObjects: LibraryObjectMap;
    RackObjects: RackObjectMap;
    ScoreObjects: ScoreObjectMap;
    LibraryClasses: LibraryClassMap;
    RackClasses: RackClassMap;
    ScoreClasses: ScoreClassMap;
    SheetClasses: SheetClassMap;
    LibraryNodes: LibraryNodesMap;
    RackNodes: RackNodesMap;
    RootNode: LibraryNode;
    ScoreNodes: ScoreNodesMap;
    SheetNodes: SheetNodesMap;
    setLibraryObject(id: number, obj: TLibraryObject): TLibrary;
    addRack(id: number, rackObject: TRackObject): TLibrary;
    addScore(id: number, scoreObject: TScoreObject): TLibrary;
    addSheet(id: number, sheetObject: TSheetObject): TLibrary;
    deleteRack(id: number): TLibrary;
    deleteScore(id: number): TLibrary;
    deleteSheet(id: number): TLibrary;
    insertRack(rackObject: TRackObject): TLibrary;
    insertScore(id: number, scoreObject: TScoreObject): TLibrary;
    insertSheet(id: number, sheetObject: TSheetObject): TLibrary;
    setRackObject(id: number, rackObject: TRackObject): TLibrary;
    setScoreObject(id: number, scoreObject: TScoreObject): TLibrary;
    setSheetObject(id: number, sheetObject: TSheetObject): TLibrary;
    setLibraryClass(id: number, clss: LibraryClass): TLibrary;
    setRackClass(id: number, clss: RackClass): TLibrary;
    setScoreClass(id: number, clss: ScoreClass): TLibrary;
    setSheetClass(id: number, clss: SheetClass): TLibrary;
    setLibraryNode(id: number, node: LibraryNode): TLibrary;
    setRackNode(id: number, node: RackNode): TLibrary;
    getScoreNode(id: number): ScoreNode;
    setScoreNode(id: number, node: ScoreNode): TLibrary;
    setSheetNode(id: number, node: SheetNode): TLibrary;
    deleteLibraryObject(id: number): TLibrary;
    newRackObject(parentId: number, sequence: number): TLibrary;
    newScoreObject(parentId: number, sequence: number): TLibrary;
    newSheetObject(parentId: number, sequence: number): TLibrary;
    buildTree(): TLibrary;
    updateDb(query: {table: string, pkey: string, id: number, field: string, value: number | string }): TLibrary;
}
