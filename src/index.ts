import { app, BrowserWindow, ipcMain } from "electron";
import PATH from "path";
import FS from "fs";
import { walk , Letture } from "./Library/Backend";
import OS from "os";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const dataDir: string = PATH.resolve(OS.homedir(), ".pianopiano");
if (!FS.existsSync(dataDir)){
  FS.mkdirSync(dataDir);
}

if(!(app.isPackaged && FS.existsSync(PATH.resolve(dataDir,"Letture.db")))) {
  console.log("First copy of database");
  FS.copyFileSync(
    PATH.resolve(__dirname,"Data/Letture.db"),
    PATH.resolve(dataDir,"Letture.db")
  );
}

const letture: Letture =  new Letture(PATH.resolve(dataDir,"Letture.db"));

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 1800,
    height: 1000,
    //fullscreen: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  mainWindow.setIcon(PATH.resolve(__dirname,"pianissimo.png"));
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // Open the DevTools.
  mainWindow.webContents.openDevTools();


  //console.log(
  //  letture.Db.prepare("SELECT DOWNLOADFILE(sheet) FROM sheets WHERE sheetid=1;").pluck().get().toString()
  //);

  FS.writeFileSync(
    "./test2.json",
    JSON.stringify(
      letture.rootBookEntry(),
      null,
      1
    )
  );


};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


ipcMain.on("request-dir-listing", async (event) => {
  event.reply("response-dir-listing", walk("../renderer/main_window/Letture"));
});

ipcMain.on("request-sheet-list", async (event) => {
  event.reply("response-sheet-list", letture.rootBookEntry().children);
});

ipcMain.on("request-sheet", async (event,sheet) => {
  //event.reply("response-sheet", encodeURIComponent(FS.readFileSync(sheet).toString()));
  const sheetId: number = Number(sheet.split("-").slice(-1));
  const xml: string = (<Buffer>letture.prepare(`SELECT DOWNLOADFILE("sheet") FROM SHEETS WHERE "sheetid"=${sheetId};`).pluck().get()).toString();
  event.reply("response-sheet", {id: sheet, xml: xml});
  console.log(xml);
});
